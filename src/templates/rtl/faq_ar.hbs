{{> header}}
{{> loader}}
<main>
  <section class="pageBanner">
    <div class="bgBox abs">
      <picture>
        <source srcset="{{assets}}/images/aboutBanner.webp" type="image/webp">
        <source srcset="{{assets}}/images/aboutBanner.jpg" type="image/jpeg">
        <img src="{{assets}}/images/aboutBanner.jpg" loading="lazy" alt="" width="1900" height="688">
      </picture>
    </div>
    <div class="container">
      <div class="titleWrap">
        <h1>
          <span>التعليمات</span>
        </h1>
      </div>
      <div class="bottomBox">
        <div class="breadcrumb_wrap">
          <ul>
            <li>
              <a href="{{ menuLink 'index'}}"><span>مسكن</span></a>
            </li>

            <li class="current"><span>التعليمات</span>
            </li>
          </ul>
        </div>
        <div class="backBox">
          <a href="{{ menuLink 'index'}}" class="link_">
            <span>خلف</span>
            <div class="icon">
              <img src="{{assets}}/images/backBtn.svg" loading="lazy" alt="" width="20" height="20" />
            </div>
          </a>
        </div>
      </div>
    </div>
  </section>
  <section class="pageSection  ">
    <div class="container ">


      <div class="faqWrap">
        <div class="details-group">
          <details class="details" open>
            <summary class="details__summary">
              <div class="number_">01</div>
              <span>العميل مهم جدا ، العميل سيتبعه. لا توجد طبقة أرض وخوف
                لوضع</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight ">
              <p>العميل مهم جدا ، العميل سيتبعه. لا مكان للخوف والخوف.
                Duis molestie، risus sed venenatus fermentum، الخوف qua feugiat urn، quis placrat lectus eros ac
                ضرر هذا عدد كبير من اللاعبين. في قلق الحياة. لكن الثمن ، إيروس في الوقت المناسب ،
                حكمة الوادي حرة ، أو من يريد أن يضحك وقت القداس. للحصول على فاصل حر في وسادة كبيرة
                موظف فوسي لكن السرير الجعبة.
              </p>
            </div>
          </details>

          <details class="details">
            <summary class="details__summary ">
              <div class="number_">02</div>
              <span> العميل مهم جدا ، العميل سيتبعه. لا توجد طبقة أرض وخوف
                لوضع</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight">
              <p> بقليل من المساعدة من JavaScript ، يمكننا تكملة السلوك الافتراضي لجعل الأكورديون
                هو
                فائقة النعومة ومصممة بلطف ، لكنها لا تزال تتحلل برشاقة. </p>
              <p> يستخدم هذا الأكورديون JS لحساب الارتفاعات حتى نتمكن من استخدام انتقالات CSS بدون أي ارتفاع أقصى
                الخارقة.
                كما أنه يحدد مهلة قبل إزالة السمة <code> open </code> ، وبالتالي فإن محتوى ملف
                سيظل عنصر <code> & lt؛ details & gt؛ </code> مرئيًا حتى انتهاء انتقال الارتفاع.
              </p>

            </div>
          </details>

          <details class="details">
            <summary class="details__summary">
              <div class="number_">03</div>
              <span> العميل مهم جدا ، العميل سيتبعه. لا توجد طبقة أرض وخوف
                لوضع</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight">
              <ul>
                <li>
                  يستخدم هذا الأكورديون JS لحساب الارتفاعات حتى نتمكن من استخدام انتقالات CSS بدون أي ارتفاع أقصى
                  الخارقة.
                  كما أنه يحدد مهلة قبل إزالة ملف

                </li>
                <li>
                  يستخدم هذا الأكورديون JS لحساب الارتفاعات حتى نتمكن من استخدام انتقالات CSS بدون أي ارتفاع أقصى
                  الخارقة.
                  كما أنه يحدد مهلة قبل إزالة ملف
                </li>
              </ul>
            </div>
          </details>

          <details class="details">
            <summary class="details__summary">
              <div class="number_">04</div>
              <span> العميل مهم جدا ، العميل سيتبعه. لا توجد طبقة أرض وخوف
                لوضع</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight">
              <p> إذا أعجبك هذا القلم ، فتحقق من <a target="_blank" href="https://keithpickering.github.io">
                  موقع المحفظة </a>. أنا أقبل المشاريع الجديدة طوال الوقت ، لذا راسلني على الخط. </p>
            </div>
          </details>
          <details class="details">
            <summary class="details__summary">
              <div class="number_">05</div>
              <span> العميل مهم جدا ، العميل سيتبعه. لا توجد أرض
                ونضع طبقة الخوف.</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight">
              <p> إذا أعجبك هذا القلم ، فتحقق من <a target="_blank" href="https://keithpickering.github.io">
                  موقع المحفظة </a>. أنا أقبل المشاريع الجديدة طوال الوقت ، لذا راسلني على الخط. </p>
            </div>
          </details>
          <details class="details">
            <summary class="details__summary">
              <div class="number_">06</div>
              <span> العميل مهم جدا ، العميل سيتبعه. لا توجد أرض
                ونضع طبقة الخوف.</span>
              <div class="icon"></div>
            </summary>
            <div class="details__content textBox big_lineHeight">
              <p> إذا أعجبك هذا القلم ، فتحقق من <a target="_blank" href="https://keithpickering.github.io">
                  موقع المحفظة </a>. أنا أقبل المشاريع الجديدة طوال الوقت ، لذا راسلني على الخط. </p>
            </div>
          </details>
        </div>
      </div>

    </div>
  </section>



</main>
{{> script-page}}
{{> footer}}
<script>
  class Details {
    constructor(el, settings) {
      this.group = el;
      this.details = this.group.getElementsByClassName("details");
      this.toggles = this.group.getElementsByClassName("details__summary");
      this.contents = this.group.getElementsByClassName("details__content");

      // Set default settings if necessary
      this.settings = Object.assign({
        speed: 300,
        one_visible: false
      }, settings);

      // Setup inital positions
      for (let i = 0; i < this.details.length; i++) {
        const detail = this.details[i];
        const toggle = this.toggles[i];
        const content = this.contents[i];

        // Set transition-duration to match JS setting
        detail.style.transitionDuration = this.settings.speed + "ms";

        // Set initial height to transition from
        if (!detail.hasAttribute("open")) {
          detail.style.height = toggle.clientHeight + "px";
        } else {
          detail.style.height = toggle.clientHeight + content.clientHeight + "px";
        }
      }

      // Setup click handler
      this.group.addEventListener("click", (e) => {
        if (e.target.classList.contains("details__summary")) {
          e.preventDefault();

          let num = 0;
          for (let i = 0; i < this.toggles.length; i++) {
            if (this.toggles[i] === e.target) {
              num = i;
              break;
            }
          }

          if (!e.target.parentNode.hasAttribute("open")) {
            this.open(num);
          } else {
            this.close(num);
          }
        }
      });
    }

    open(i) {
      const detail = this.details[i];
      const toggle = this.toggles[i];
      const content = this.contents[i];

      // If applicable, hide all the other details first
      if (this.settings.one_visible) {
        for (let a = 0; a < this.toggles.length; a++) {
          if (i !== a) this.close(a);
        }
      }

      // Update class
      detail.classList.remove("is-closing");

      // Get height of toggle
      const toggle_height = toggle.clientHeight;

      // Momentarily show the contents just to get the height
      detail.setAttribute("open", true);
      const content_height = content.clientHeight;
      detail.removeAttribute("open");

      // Set the correct height and let CSS transition it
      detail.style.height = toggle_height + content_height + "px";

      // Finally set the open attr
      detail.setAttribute("open", true);
    }

    close(i) {
      const detail = this.details[i];
      const toggle = this.toggles[i];

      // Update class
      detail.classList.add("is-closing");

      // Get height of toggle
      const toggle_height = toggle.clientHeight;

      // Set the height so only the toggle is visible
      detail.style.height = toggle_height + "px";

      setTimeout(() => {
        // Check if still closing
        if (detail.classList.contains("is-closing"))
          detail.removeAttribute("open");
        detail.classList.remove("is-closing");
      }, this.settings.speed);
    }
  }

  (() => {
    const els = document.getElementsByClassName("details-group");

    for (let i = 0; i < els.length; i++) {
      const details = new Details(els[i], {
        speed: 500,
        one_visible: true
      });
    }
  })();
</script>